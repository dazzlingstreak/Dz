
有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己

解决的问题：
将一个系统分割成一个一些类相互协作的类有一个不好的副作用，那就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。观察者就是解决这类的耦合关系的。

典型的例子：事件

代码中，Notify通知后，各个订阅了该主题的观察者收到通知后，他们自个进行各自不同的操作。而不是在Notify方法中，处理各个Observer的实际操作。


应用场景：
1、  对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。 
2、  对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。
